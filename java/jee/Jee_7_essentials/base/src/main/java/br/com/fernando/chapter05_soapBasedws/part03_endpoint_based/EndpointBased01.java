package br.com.fernando.chapter05_soapBasedws.part03_endpoint_based;

import java.io.ByteArrayInputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import javax.xml.namespace.QName;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.ws.Endpoint;
import javax.xml.ws.EndpointContext;
import javax.xml.ws.Service;

import com.sun.xml.ws.transport.httpspi.servlet.EndpointContextImpl;

public class EndpointBased01 {

    public static void main(String[] args) throws Exception {

        // An Endpoint-based endpoint offers a lightweight alternative for creating and publishing an endpoint. 
        // This is a convenient way of deploying a JAX-WS-based web service endpoint from Java SE applications.

        // ==================================================================================================================================
        // ----------------------------------------------------------------------------------------
        // Server 01
        //
        // In this code, the POJO 'SimpleWebService' annotated with @WebServiceClient is used as the endpoint implementation.
        // The address of the endpoint is passed as an argument to Endpoint.publish.
        // This method call publishes the endpoint and starts accepting incoming requests.
        // 
        final Endpoint endpoint01 = Endpoint.publish("http://localhost:8080/example/SimpleWebService", new SimpleWebService());

        // The endpoint implementation can be a Provider-based endpoint as well.
        // A mapped WSDL is automatically generated by the underlying runtime in this case.

        // ----------------------------------------------------------------------------------------
        // Cliente 01
        final String defaulQNameUrl = "http://part03_endpoint_based.chapter05_soap_basedws.fernando.com.br/";

        final Service nameCreatorService = Service.create( //
                new URL("http://localhost:8080/example/SimpleWebService?wsdl"), //
                new QName(defaulQNameUrl, "SimpleWebServiceService"));

        final SimpleWebServiceInterface nameCreatorEndpoint = nameCreatorService.getPort( //
                new QName(defaulQNameUrl, "SimpleWebServicePort"), //
                SimpleWebServiceInterface.class);

        final String response = nameCreatorEndpoint.sayHello("Paul");

        System.out.println(response);
        // ----------------------------------------------------------------------------------------
        // Stop server 01
        // The endpoint can be taken down and stop receiving incoming requests:
        endpoint01.stop();

        // ==================================================================================================================================
        // ----------------------------------------------------------------------------------------
        // Server 02
        final Endpoint endpoint02 = Endpoint.create(new SimpleWebService());

        // You can publish a contract-first endpoint by packaging the WSDL and specifying thewsdl:port and wsdl:service as part of the configuration:

        final List<Source> metadata = new ArrayList<Source>();

        final String wsdlLocation = "http://localhost:8080/example/SimpleWebService?wsdl"; // Dummy URL
        final Source source = new StreamSource(new ByteArrayInputStream(new byte[0])); // Dummy content
        source.setSystemId(wsdlLocation);
        metadata.add(source);

        final Map<String, Object> props = new HashMap<String, Object>();
        props.put(Endpoint.WSDL_PORT, new QName(defaulQNameUrl, "SimpleWebServicePort"));
        props.put(Endpoint.WSDL_SERVICE, new QName(defaulQNameUrl, "SimpleWebServiceService"));
        endpoint02.setProperties(props);
        endpoint02.publish("http://localhost:8080/example/SimpleWebService");

        // An Executor may be set on the endpoint to gain better control over the threads used to dispatch incoming requests:
        final ThreadPoolExecutor executor = new ThreadPoolExecutor(4, 10, 100, TimeUnit.MILLISECONDS, new PriorityBlockingQueue<Runnable>());
        endpoint02.setExecutor(executor);

        // ----------------------------------------------------------------------------------------
        // Cliente 01

        // ----------------------------------------------------------------------------------------
        // Stop server 02
        endpoint02.stop();

        // EndpointContext allows multiple endpoints in an application to share any information
        EndpointContext c = new EndpointContextImpl();
        c.getEndpoints(); //
    }

}

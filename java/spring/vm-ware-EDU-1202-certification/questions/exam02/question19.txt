How should configuration classes in src/test/java be annotated so that any declared beans are added to the ApplicationContext in tests?
  ​
A)
@TestConfiguration

B)​
@ConfigurationProperties
​
C)
@TestContext
​
D)
@Configuration






































Answer 'A'

@TestConfiguration can be used on an inner class of a test to customize the primary configuration. 

When placed on a top-level class, @TestConfiguration indicates that classes in 
src/test/java should not be picked up by scanning. 

We use @TestConfiguration to modify Spring’s application context during test runtime. 
We can use it to override certain bean definitions, for example to replace real beans with fake beans 
or to change the configuration of a bean to make it better testable.

@SpringBootTest
@TestPropertySource(locations="classpath:test.properties")
class TestConfigurationExampleAppTests {
    @Autowired
    private DataService dataService;
    ...
 }



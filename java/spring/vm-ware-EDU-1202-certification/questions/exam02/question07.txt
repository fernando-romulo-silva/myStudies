In Spring Boot, which of the following ways can be used to customize an auto-configuration class provided in a Spring starter?
  ​
A)
It cannot be customized.
​
B)
Remove the class
​
C)
Annotate using @Disabled
​
D)
Override the bean definition (overriding needs to be enabled first)








































Answer 'D'

The simplest way to customize Spring auto-configuration is by changing any property values used by the related beans. 

The next option is to create a Spring bean to replace a bean created by the auto-configuration. 

To replace the auto-configuration bean, the new bean needs to have a matching type and/or name 
(depending on the @Conditional annotation(s) annotating the bean method in the auto- configuration). 

Note that in order to be able to override bean definitions using beans with the same name as the original bean, 
the following application property needs to be set to true in the Spring Boot application: 

spring.main.allow-bean-definition-overriding=true 

Another option is to disable one or more auto-configuration classes altogether.

This can be accomplished either in the @EnableAutoConfiguration annotation, by specifying the class(es) or fully qualified class name(s), 
or by using the spring.autoconfigure.exclude property with one or more fully qualified class name(s). 

Removing the class is not recommended and usually not possible if the class is provided in a starter without removing the entire starter
(which will remove many of the needed classes).

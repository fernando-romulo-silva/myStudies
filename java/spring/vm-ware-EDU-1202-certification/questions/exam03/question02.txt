Which of the following are uses for the spring.factories file?
  ​
A)
Bean overriding

B)​
Register application event listeners

C)​
Locate auto-configuration candidates

D)​
Register Application-specific Factory classes
   








































Answers 'B' and 'C'


Spring Boot checks for the presence of a META-INF/spring.factories file within your published jar. 
The file should list your configuration classes under the EnableAutoConfiguration key.

org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\
org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\
org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\
org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration




The spring.factories file can be used to: 

• Register application event listeners regardless of how the Spring Boot application is created (configured). 
Implement a class that inherits from SpringApplicationEvent and register it in the spring.factories file. 

• Locate auto-configuration candidates in, for instance, your own starter module. 

• Register a filter to limit the auto-configuration classes considered. See AutoConfigurationImportFilter. 

• Activate application listeners that creates a file containing the application process id and/or creates file(s)
containing the port number(s) used by the running web server (if any). 
These listeners, ApplicationPidFileWriter and WebServerPortFileWriter, both implement the ApplicationListener interface. 

• Register failure analyzers. Failure analyzers implement the FailureAnalyzer interface and can be registered in the spring.factories file. 

• Customize the environment or application context prior to the Spring Boot application has started up. Classes that implementing
the ApplicationListener, ApplicationContextListener or the EnvironmentPostProcessor interfaces may be registered in the spring.factories file. 

• Register the availability of view template providers. 
See the TemplateAvailabilityProvider interface. 

https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-developing-auto-configuration




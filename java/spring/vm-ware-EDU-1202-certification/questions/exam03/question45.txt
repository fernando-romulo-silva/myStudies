What are the advantages when using @MockBean instead of @Mock in Spring Boot tests?
  ​
A)
No extra dependencies are required
​
B)
Can be used with MockitoJUnitRunner
​
C)
Mocks all references in the application context to a bean
​
D)
Can be used as a meta annotation








































Answers 'C' and 'D'

Both the @MockBean and @Mock annotation can be used to create Mockito mocks but there are some differences between the two annotations: 

• @Mock can only be applied to fields and parameters while @MockBean can only be applied to classes and fields. 

• @Mock can be used to mock any Java class or interface while @MockBean only allows for mocking of Spring beans or creation of mock Spring beans. 

• @MockBean can be used to mock existing beans but also to create new beans that will belong to the Spring application context. 

• To be able to use the @MockBean annotation, the Spring runner (@RunWith(SpringRunner.class) ) has to be used to run the associated test. 

• @MockBean can be used to create custom annotations for specific, reoccurring, needs When running Spring Boot Tests, 
both @Mock and @MockBean are included in the spring-boot-starter-test. 


https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing-spring-boot-applications-mocking-beans


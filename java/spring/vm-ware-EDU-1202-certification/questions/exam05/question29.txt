When the @Autowired annotation is placed on __________, it will _____________

A)
a collection of beans, inject all beans of that type

B)
a final field, throw an exception

C)
a method with multiple arguments, throw an exception

D)
a setter, autowire using the setter












































Answers 'A', 'B' and 'D' 

@Autowired marks a constructor, field, setter method, or config method as to be autowired by Spring's dependency injection facilities. 

This is an alternative to the JSR-330 Inject annotation, adding required-vs-optional semantics. 

Config methods may have an arbitrary name and any number of arguments; each of those arguments will be autowired with a matching bean in the Spring container.

Bean property setter methods are effectively just a special case of such a general config method. 

Such config methods do not have to be public. 

Fields are injected right after construction of a bean, before any config methods are invoked. 

Such a config field does not have to be public.

This means that the field cannot be final, or an exception will be thrown. 

In case of an array, Collection, or Map dependency type, the container autowires all beans matching the declared value type. 

https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html

How can auditing be enabled for Spring Boot Actuator?

A)
Setting the property actuator.audit.enabled=true

B)
The @EnableAuditing annotation

C)
Declaring a bean of type AuditEventRepository

D)
None of the above.











































Answer 'C'

Once Spring Security is in play, Spring Boot Actuator has a flexible audit framework that publishes events 
(by default, “authentication success”, “failure” and “access denied” exceptions).

This feature can be very useful for reporting and for implementing a lock-out policy based on authentication failures. 
Auditing can be enabled by providing a bean of type AuditEventRepository in your application’s configuration.
 
For convenience, Spring Boot offers an InMemoryAuditEventRepository. 
InMemoryAuditEventRepository has limited capabilities and we recommend using it only for development environments.

For production environments, consider creating your own alternative AuditEventRepository implementation.

@Component
public class AuditEventListener extends AbstractAuditListener {

    private static final Logger LOG = LoggerFactory.getLogger(AuditEventListener.class);

    @Autowired
    private AuditEventRepository auditEventRepository;

    @Override
    protected void onAuditEvent(AuditEvent event) {

        LOG.info("On audit event: timestamp: {}, principal: {}, type: {}, data: {}",
            event.getTimestamp(),
            event.getPrincipal(),
            event.getType(),
            event.getData()
        );

        auditEventRepository.add(event);
    }
}


The @EnableAuditing does not exist. 
Configuration Properties relating to actuator are all under the key "management".
For example: management.auditevents.enabled = true (default). 
 
https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-auditing 

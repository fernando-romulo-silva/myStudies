An application image runs in multiple environments, and each environment uses different certificates and ports, 
what is the best practice to deploy the containers?

​A)​
Create a Dockerfile for each environment, specifying ports and Docker secrets for certificates.
​
B)
Create a Dockerfile for each environment, specifying ports and ENV variables for certificates.
​
C)
Create a config file for each environment.
​
D)
Create images that contain the specific configuration for every environment.











































The correct option is 'C'

Docker swarm service configs allow you to store non-sensitive information, 
such as configuration files, outside a service’s image or running containers. 

This allows you to keep your images as generic as possible, without the need to bind-mount 
configuration files into the containers or use environment variables.

1) Add a config to Docker. 

$ echo "This is a config" | docker config create my-config - 


2) Create a redis service and grant it access to the config. 

$ docker service create --name redis --config my-config redis:alpine


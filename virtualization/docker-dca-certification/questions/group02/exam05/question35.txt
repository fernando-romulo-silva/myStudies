You want to prevent Docker Swarm encryption keys from being stored insecurely on swarm managers. 
How can you enforce a lock on the swarm cluster?

A)
You can use the --autolock=true flag with the docker swarm update command.

B)
You can find the critical files after the installation and delete them.

C)
You can’t do it because Docker does not offer this functionality.

D)
The autolock feature must be turned on when the cluster is initialized and cannot be enabled after the fact.




































Answer A

Sensitive information to containers running on a Swarm are normally stored in a secret.
A secret (usually containing credentials, certificates, and other private information) is provided to service at runtime. 
The secret is saved in the Raft logs.
The Raft logs used by swarm managers are encrypted on disk by default.

When Docker restarts, both the TLS key used to encrypt communication among swarm nodes, and the key used to encrypt and decrypt Raft logs on disk, 
are loaded into each manager node’s memory.

Docker 1.13 introduces the ability to protect the mutual TLS encryption key and the key used to encrypt and decrypt Raft logs at rest, 
by allowing you to take ownership of these keys and to require manual unlocking of your managers. 
This feature is called autolock.

When Docker restarts, you must unlock the swarm first, using a key encryption key generated by Docker when the swarm was locked. 
You can rotate this key encryption key at any time.

When you initialize a new swarm, you can use the –autolock flag to enable autolocking of swarm manager nodes when Docker restarts.

$ docker swarm init –autolock

To enable autolock on an existing swarm, set the autolock flag to true.

$ docker swarm update –autolock=true

docker container run -ti debian

apt-get install postfix

exit



docker container commit 95fcb33b2247 debian-with-postfix

docker image ls



docker image build [-t  MY_TAG] [--label MY_LABEL=VALUE] [--file MY_DOCKERFILE] [BUILD_CONTEXT]

docker build --file Dockerfile.application -t templated:production --label enviroment=remote --build-arg ENVIRONMENT=production .



docker image ls --filter label=enviroment

docker image ls --format "table {{.ID}}\\t{{.Repository}}:{{.Tag}}\\t{{.CreatedAt}}"



docker image save nginx:alpine -o /tmp/codegazers_colors_test.tar

docker image rm nginx:alpine -f

docker image load </tmp/codegazers_colors_test.tar


===========================================================================================================================
Lab
===========================================================================================================================

echo "FROM alpine:latest
RUN echo "hello world"" > Dockerfile.cache

docker image build --file Dockerfile.cache --no-cache --label lab=lab1 -t test1 .

docker image build --file Dockerfile.cache --no-cache --label lab=lab1 -t test2 .

docker image ls --filter label=lab=lab1

echo 'FROM alpine:3.9
RUN echo "hello world"
RUN apk add --update -q python3' > Dockerfile.cache


time docker image build --file Dockerfile.cache -q -t test3 --no-cache .

echo 'FROM alpine:3.9
RUN echo "hello world"
RUN apk add --update -q python3
RUN apk add -q httpie' > Dockerfile.cache

time docker image build --file Dockerfile.cache -q -t test4 --no-cache .



===========================================================================================================================



echo 'FROM alpine
RUN mkdir /data
RUN echo "hello world" > /data/helloworld
VOLUME /data' > Dockerfile.chapter2.lab2

docker image build -f Dockerfile.chapter2.lab2 -t ch2lab2 --label lab=lab2 .

docker container run ch2lab2 ls -lt /data




echo 'FROM alpine
RUN mkdir /data
VOLUME /data
RUN echo "hello world" > /data/helloworld' > Dockerfile.chapter2.lab2-2

docker image build -f Dockerfile.chapter2.lab2-2 -t ch2lab2-2 --label lab=lab2 .

docker container run ch2lab2-2 ls -lt /data


===========================================================================================================================


cd $HOME/chapter2
mkdir multistage
cd multistage


echo '#include <stdio.h>
int main()
{
  printf("Hello, World!\n");
  return 0;
}' > helloword.c

echo 'FROM alpine:3.9 AS compiler 
RUN apk update && \ 
apk add --update -q --no-cache alpine-sdk 
RUN mkdir /myapp 
WORKDIR /myapp 
ADD *.c /myapp 
RUN mkdir bin 
RUN gcc -Wall helloword.c -o bin/helloworld 
 
FROM alpine:3.9
COPY --from=compiler /myapp/bin/helloworld /myapp/helloworld 
CMD /myapp/helloworld' > Dockerfile.multistage


docker build --file Dockerfile.multistage --no-cache -t helloworld --label lab=lab3 .

docker container run helloworld:latest


===========================================================================================================================


docker container run -d -p 5000:5000 --restart=always --name registry registry:2

docker pull alpine

docker tag alpine localhost:5000/my-alpine

docker image push localhost:5000/my-alpine

docker container run localhost:5000/my-alpine:latest ls /tmp

docker container rm --force registry


===========================================================================================================================



cd $HOME/chapter2
mkdir templating
cd templating


echo 'FROM nginx:1.18.0-alpine
RUN apk update -q
RUN apk add curl httpie' > Dockerfile.nginx-dev

echo 'FROM nginx:1.18.0-alpine
RUN apk update -q' > Dockerfile.nginx

docker image build --quiet --file Dockerfile.nginx-dev -t baseimage:development --label lab=lab4 .

docker image build --quiet --file Dockerfile.nginx -t baseimage:production --label lab=lab4 .

docker image ls --filter label=lab=lab4


===========================================================================================================================



echo 'ARG ENVIRONMENT=development 
FROM baseimage:${ENVIRONMENT} 
COPY html/* /usr/share/nginx/html' > Dockerfile.application

mkdir html

echo "This is a simple test and of course it is not an application" > html/index.html


docker image build --file Dockerfile.application -t templated:development --build-arg ENVIRONMENT=development --label lab=lab4 .

docker image build --file Dockerfile.application -t templated:production --build-arg ENVIRONMENT=production --label lab=lab4 . 


docker container run -ti debian

apt-get install postfix

exit



docker container commit 95fcb33b2247 debian-with-postfix

docker image ls



docker image build [-t  MY_TAG] [--label MY_LABEL=VALUE] [--file MY_DOCKERFILE] [BUILD_CONTEXT]

docker build --file Dockerfile.application -t templated:production --label enviroment=remote --build-arg ENVIRONMENT=production .



docker image ls --filter label=enviroment

docker image ls --format "table {{.ID}}\\t{{.Repository}}:{{.Tag}}\\t{{.CreatedAt}}"



docker image save nginx:alpine -o /tmp/codegazers_colors_test.tar

docker image rm nginx:alpine -f

docker image load </tmp/codegazers_colors_test.tar



Lab


echo "FROM alpine:latest
RUN echo "hello world"" > Dockerfile.cache

docker image build --file Dockerfile.cache --no-cache --label lab=lab1 -t test1 .

docker image build --file Dockerfile.cache --no-cache --label lab=lab1 -t test2 .

docker image ls --filter label=lab=lab1

echo 'FROM alpine:3.9
RUN echo "hello world"
RUN apk add --update -q python3' > Dockerfile.cache


time docker image build --file Dockerfile.cache -q -t test3 --no-cache .

echo 'FROM alpine:3.9
RUN echo "hello world"
RUN apk add --update -q python3
RUN apk add -q httpie' > Dockerfile.cache

time docker image build --file Dockerfile.cache -q -t test4 --no-cache .





echo 'FROM alpine
RUN mkdir /data
RUN echo "hello world" > /data/helloworld
VOLUME /data' > Dockerfile.chapter2.lab2

docker image build -f Dockerfile.chapter2.lab2 -t ch2lab2 --label lab=lab2 .

docker container run ch2lab2 ls -lt /data




echo 'FROM alpine
RUN mkdir /data
VOLUME /data
RUN echo "hello world" > /data/helloworld' > Dockerfile.chapter2.lab2-2

docker image build -f Dockerfile.chapter2.lab2-2 -t ch2lab2-2 --label lab=lab2 .

docker container run ch2lab2-2 ls -lt /data
$ docker image pull --quiet postgres:alpine

$ docker image inspect postgres:alpine --format "{{ .Config.Volumes }} "

$ docker container run -e POSTGRES_DB=postgres-db -e POSTGRES_USER=user -e POSTGRES_PASSWORD=user -d --name mydb postgres:alpine 

$ docker container inspect mydb --format "{{ .Mounts }} "

$ docker volume inspect 00ac69248177ca4fb3a0eff4eede98012ca928a033375cefbad3ed0e24cd1c88

$ sudo ls -lart /var/lib/docker/volumes/00ac69248177ca4fb3a0eff4eede98012ca928a033375cefbad3ed0e24cd1c88/_data

$ docker container stop mydb

$ docker container rm mydb

$ docker volume ls --filter name=00ac69248177ca4fb3a0eff4eede98012ca928a033375cefbad3ed0e24cd1c88

$ docker volume rm 00ac69248177ca4fb3a0eff4eede98012ca928a033375cefbad3ed0e24cd1c88

==============================================================================================================================

$ docker volume create mydata

$ docker container run --name c1 -v mydata:/data -ti alpine

# touch /data/persistent-file-test

# exit

$ sudo ls -lart /var/lib/docker/volumes/mydata/_data

$ docker container run --name c2 -v mydata:/tmp -ti alpine ls -lart /tmp

$ docker volume rm mydata

$ docker container rm c1 c2

$ docker volume rm mydata


==============================================================================================================================

$ docker container run -ti -d --name c1 alpine ping 8.8.8.8

$ docker container run -ti -d --name cd alpine ping 8.8.8.8

$ docker container inspect c1 --format "{{ .NetworkSettings.Networks.bridge.IPAddress }}"

$ docker container inspect c2 --format "{{ .NetworkSettings.Networks.bridge.IPAddress }}"

$ docker exec c1 ping -c 2 172.17.0.3 


$ docker container inspect c1 --format "{{json .NetworkSettings.Networks }}"

==============================================================================================================================

$ docker run -ti --network none alpine

# ip add

==============================================================================================================================

$ docker run -ti --network host alpine

# ip add


$ docker network create --driver bridge --internal --subnet 192.168.30.0/24 --label internal-only internal-only

$ docker network inspect internal-only 

$ docker container run --network internal-only -ti --name intc1 alpine sh

(Ctrl + P + Q)

$ docker container run --network internal-only -ti --name intc2 alpine sh

$ sudo iptables -L

==============================================================================================================================

$ docker container run -d --name webserver nginx:alpine

$ docker container inspect webserver --format "{{json .NetworkSettings.Networks.bridge.IPAddress }}"

$ curl http://172.17.0.2

$ docker container run -d --name public-webserver --publish 80 nginx:alpine

$ docker container ls --filter name=public-webserver

$ curl http://0.0.0.0:49153



==============================================================================================================================


$ docker image build -q -t simpleapp:v1.0 .

$ docker container run -d --name v1.0 simpleapp:v1.0

$ docker container ls --filter name=v1.0

$ docker container inspect v1.0 --format "{{.NetworkSettings.Networks.bridge.IPAddress }}"

$ curl http://172.17.0.3:5000



$ docker container run -d --name v1.0-bindmount -v $(pwd)/templates:/app/templates simpleapp:v1.0 

$ docker container inspect v1.0-bindmount --format "{{.NetworkSettings.Networks.bridge.IPAddress }}"

$ curl http://172.17.0.4:5000



$ docker plugin install vieux/sshfs

$ sudo systemctl status ssh

$ docker plugin ls

$ docker plugin inspect 3ab308e8b3ed

$ docker volume create -d vieux/sshfs -o sshcmd=ssh_user@127.0.0.1:/tmp -o password=ssh_userpasswd sshvolume

$ docker container run --rm -it -v sshvolume:/data alpine sh




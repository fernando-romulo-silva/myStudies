package br.com.fernando.chapter15_batchProcessing.part00_intro;

public class Intro {

    // Batch processing is the execution of a series of jobs and is suitable for noninteractive, bulk-oriented, and long-running tasks.
    //
    // Typical examples are end-of-month bank statement generation, end-of-day jobs such as interest calculation, and ETL
    // (extracttransform-load) in a data warehouse.
    //
    // These tasks are typically data or computationally intensive, execute sequentially or in parallel, and may be initiated through
    // various invocation models, including ad hoc, scheduled, and on-demand.
    //
    // This specification defines a programming model for batch applications and a runtime for scheduling and executing jobs.
    // .....................................................................
    // .....................................................................
    // .||===========||......||===||......||====||..........................
    // .||JobOperator||......||Job||......||Step||..........................
    // .||===========||......||===||......||====||..........................
    // .......|.................|.............|.............................
    // .......|.................|.............|.............................
    // .......v.................v.............v.............................
    // .||=========================================||.......................
    // .||............Job Repository...............||.......................
    // .||=========================================||.......................
    // .....................................................................
    //
    // JobOperator provides an interface to manage all aspects of job processing, including operational commands (such as start, restart, and stop)
    // and job repository commands (such as job retrieval and step executions).
    //
    // A job is an entity that encapsulates an entire batch process.
    // A job is typically put together with a Job Specification Language and consists of one or more steps.
    //
    // A step is a domain object that encapsulates an independent, sequential phase of a job.
    // A step contains all of the information necessary to define and control the actual batch processing.
    //
    // JobRepository holds information about jobs currently running and jobs that have run in the past.
    //
    // ...........................................................................................
    // ......................................................................||====>ItemReader....
    // ...................................................||==========||.....||...................
    // ......................................||=====>(1.*)||..chunk...||=====||====>ItemProcessor.
    // .||=======||.........||========||.....||...........||==========||.....||...................
    // .||..Job..||===>(1.*)||..step..||====(or).............................||====>ItemWriter....
    // .||=======||.........||========||.....||......||==========||...............................
    // ......................................||=====>||.batchlet.||...............................
    // ..............................................||==========||...............................
    // ...........................................................................................
    //
    // ItemReader is an abstraction that represents the retrieval of an input for a step;
    //
    // ItemProcessor is an abstraction that represents the business processing of an item;
    //
    // ItemWriter is an abstraction that represents the output of a step;
    //
    // The batchlet style implements a roll-your-own batch pattern.
    //
    //
    // https://pt.slideshare.net/arungupta1/jbatch-21153200
    //
    // https://eclipse-ee4j.github.io/glassfish/docs/latest/reference-manual/set-batch-runtime-configuration.html
    //
    // https://docs.huihoo.com/glassfish/4.0/pdf/administration-guide.pdf -> Administering Batch Jobs -> Configuring the Batch Runtime

}

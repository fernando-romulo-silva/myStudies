package br.fernando.ch02_object_orientation.par07_constructors_and_instantiation;

public class Test02 {

    // =========================================================================================================================================
    // Rules for Constructors
    static void test01() {
        // * Constructors can use any access modifier, including private .
        //
        // * The constructor name must match the name of the class.
        //
        // * Constructors must not have a return type.
        //
        // * It’s legal (but stupid) to have a method with the same name as the class, but that doesn’t make it a constructor.
        // If you see a return type, it’s a method ratherthan a constructor.
        //
        // * If you don’t type a constructor into your class code, a default constructor will be automatically generated by the compiler.
        //
        // * The default constructor is ALWAYS a no-arg constructor.
        //
        // * If you want a no-arg constructor and you’ve typed any other constructor(s) into your class code, the compiler won’t provide
        // the no-arg constructor (or any other constructor) for you.
        //
        // * Every constructor has, as its first statement, either a call to an overloaded constructor ( this() ) or a call to the superclass
        // constructor ( super() ), although remember this call can be inserted by the compiler.
        //
        // * If you do type in a constructor and you do not type in the call to super() or a call to this() , the compiler will insert a no-arg
        // call to super() for you as the very first statement in the constructor.
        //
        // * A call to super() can either be a no-arg call or can include arguments passed to the super constructor.
        //
        // * You cannot make a call to an instance method or access an instance variable until after the super constructor runs.
        //
        // * Only static variables and methods can be accessed as part of the call to super() or this().
        //
        // * Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.
        //
        // * Interfaces do not have constructors. Interfaces are not part of an object’s inheritance tree.
        //
        // * The only way a constructor can be invoked is from within another constructor.
    }

    // =========================================================================================================================================
    // Determine Whether a Default Constructor Will Be Created 187
    static void test02() {
        // How do you know for sure whether a default constructor will be created?
        // Because you didn’t write any constructors in your class.
        //
        // How do you know what the default constructor will look like?
        // The default constructor has the same access modifier as the class.
        // The default constructor has no arguments.
        // The default constructor includes a no-arg call to the super constructor (super()).
        //
        // What happens if the super constructor has arguments?
        // Constructors can have arguments just as methods can, and if you try to invoke a
        // method that takes, say, an int, but you don’t pass anything to the method
        //
        // Constructors are never inherited. They aren’t methods. They can’t be overridden (because they aren’t
        // methods, and only instance methods can be overridden). So the type of constructor(s)
        // your superclass has in no way determines the type of default constructor you’ll get.
    }

    static class Animal {

        Animal(String name) {
        }

    }

    static class Horse extends Animal {

        Horse() {
            super("horse"); // if you remove that, problem!
        }

        Horse(String name) {
            super(name);
        }
    }

    // =========================================================================================================================================
    public static void main(String[] args) {
        test01();
    }
}
